#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('NodeJS-Starter:server');
var http = require('http');
var firebase = require("firebase");

var google = require('googleapis');
var FB = require('fb');

var options = {
  version: 'v2.7',
  appId: '1249631805087158',
  appSecret: '3fdc31fb9cdd96624a09cef0be67deec'
};

var fb = new FB.Facebook(options);

var Twitter = require('twitter');

var twitterOptions = {
  consumer_key: 'AMhXIaxcGd5xlGpAH81LwZQ1k',
  consumer_secret: '33453884-g9B8x8XWEENzVZon0CmccPSK2A560AepGLnO1rIq8'
};

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Socket io function
 * */
// Initialize Firebase
var config = {
  apiKey: "AIzaSyCajHCcMiTctSbFjejAdvAc7Q3Bt38xwPA",
  authDomain: "prezvr.firebaseapp.com",
  databaseURL: "https://prezvr.firebaseio.com",
  storageBucket: "prezvr.appspot.com"
};
firebase.initializeApp(config);
var usersRef = firebase.database().ref("users");
usersRef.on("child_added", function(snapshot, prevChildKey) {
  var newPost = snapshot.val();
  console.log("user : " + newPost);

});

io.on('connection', function (socket) {
  socket.on('checkAndUpdateUsersTable', function (user, credential) {
    console.log("checkAndUpdateUsersTable");
    console.log(credential);
    console.log(user);
    switch (credential.provider) {
      case "google.com":
        firebase.database().ref('users').once('value').then(function(result) {
          var users = result.val();
          if(!users) users = {};
          if(!users[user.uid]){
            var newUser = {
              id: user.uid,
              name: user.displayName,
              socialImgUrl: user.photoURL
            };
            var Database = firebase.database();
            Database.ref('users/' + user.uid).set(newUser);

            var plus = google.plus('v1');
            plus.people.get({
              'userId': "me",
              access_token: credential.accessToken
            }, function(err, resp){
              console.log(resp);


            });

          }
        });
        break;

      case "facebook.com":
        firebase.database().ref('users').once('value').then(function(result) {
          var users = result.val();
          if(!users) users = {};
          if(!users[user.uid]){
            fb.setAccessToken(credential.accessToken);
            fb.api('me', { fields: ['id', 'name', 'picture', 'email'] }, function (res) {
              if(!res || res.error) {
                console.log(!res ? 'error occurred' : res.error);
                return;
              }
              console.log(res);
              const newUser = {
                id: user.uid,
                name: res.name,
                socialImgUrl: res.picture.data.url
              };

              const Database = firebase.database();
              Database.ref('users/' + user.uid).set(newUser);
            });
          }
        });
        break;

      case "twitter.com":
        firebase.database().ref('users').once('value').then(function(result) {
          var users = result.val();
          if(!users) users = {};
          if(!users[user.uid]){
            twitterOptions.access_token_key = credential.accessToken;
            twitterOptions.access_token_secret = credential.secret;
            const twitterClient = new Twitter(twitterOptions);

            twitterClient.get("account/verify_credentials", function(error, data, response) {
              if (error) {
                console.log(error);
              } else {
                console.log(data);
                var newUser = {
                  id: user.uid,
                  name: data.name,
                  socialImgUrl: data.profile_image_url
                };
                var Database = firebase.database();
                Database.ref('users/' + user.uid).set(newUser);
              }
            })
          }

        });
        break;
    }
    //socket.emit('redirectUserToHome', user);
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
